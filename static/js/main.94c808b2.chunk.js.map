{"version":3,"sources":["services/dataService.ts","components/Filters/index.tsx","components/Filters/Filters.tsx","components/Chart/config.ts","components/Chart/Chart.tsx","components/Chart/index.tsx","components/Dashboard/index.tsx","components/Dashboard/Dashboard.tsx","components/App/index.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["source","sumDailyData","sourceByDay","date","_","reduce","result","day","clicks","Clicks","impressions","Impressions","getLabels","datasource","Set","campain","forEach","row","add","Datasource","Campaign","Array","from","getData","chain","filter","length","includes","getDataFilter","groupBy","map","value","Filters","initDatasource","initCampain","onApply","useState","setDatasource","setCampain","isDirty","setIsDirty","datasourceOptions","o","label","campainOptions","className","isMulti","placeholder","onChange","selection","options","onClick","disabled","labels","datasets","yAxisID","fill","lineTension","borderColor","pointRadius","data","scales","yAxes","id","type","position","Chart","sets","config","clicksSet","impressionsSet","Dashboard","setDatasourceOptions","setCampainOptions","setData","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94c808b2.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport raw from \"./source.json\";\n\nexport interface Source {\n  Date: string;\n  Datasource: string;\n  Campaign: string;\n  Clicks: number;\n  Impressions: number;\n}\n\nexport interface Labels {\n  datasource: string[];\n  campain: string[];\n}\n\nexport interface Data {\n  clicks: number;\n  impressions: number;\n  date: string;\n}\n\nconst source: Source[] = raw as Source[];\n\nconst getDataFilter = (datasource: string[], campain: string[]) => (\n  row: Source\n): boolean =>\n  (!datasource.length || datasource.includes(row.Datasource)) &&\n  (!campain.length || campain.includes(row.Campaign));\n\nconst sumDailyData = (sourceByDay: Source[], date: string) =>\n  _.reduce(\n    sourceByDay,\n    (result, day) => {\n      result.clicks += +day.Clicks;\n      result.impressions += +day.Impressions;\n      return result;\n    },\n    { clicks: 0, impressions: 0, date }\n  );\n\nexport const getLabels = (): Labels => {\n  const datasource = new Set<string>();\n  const campain = new Set<string>();\n\n  source.forEach(row => {\n    datasource.add(row.Datasource);\n    campain.add(row.Campaign);\n  });\n\n  return { datasource: Array.from(datasource), campain: Array.from(campain) };\n};\n\nexport const getData = (datasource: string[], campain: string[]): Data[] => {\n  return _.chain(source)\n    .filter(getDataFilter(datasource, campain))\n    .groupBy(\"Date\")\n    .map(sumDailyData)\n    .value();\n};\n\nexport default {\n  getData,\n  getLabels\n};\n","import Filters from './Filters';\n\nexport default Filters;","import React, { useState } from \"react\";\nimport Select, { ValueType } from \"react-select\";\n\nimport \"./Filters.scss\";\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\nexport interface Props {\n  initDatasource: string[];\n  initCampain: string[];\n  onApply: (datasource: string[], campain: string[]) => void;\n}\n\nconst Filters: React.FC<Props> = ({ initDatasource, initCampain, onApply }) => {\n  const [datasource, setDatasource] = useState<ValueType<Option>>([]);\n  const [campain, setCampain] = useState<ValueType<Option>>([]);\n  const [isDirty, setIsDirty] = useState(false);\n\n  const handleDataSourceChange = (selection: ValueType<Option>) => {\n    setIsDirty(true);\n    setDatasource(selection || []);\n  };\n\n  const handleCampainChange = (selection: ValueType<Option>) => {\n    setIsDirty(true);\n    setCampain(selection || []);\n  };\n\n  const handleApply = () => {\n    setIsDirty(false);\n    onApply(\n      (datasource as Option[]).map(o => o.value),\n      (campain as Option[]).map(o => o.value)\n    );\n  };\n\n  const datasourceOptions = initDatasource.map(o => ({ value: o, label: o }));\n  const campainOptions = initCampain.map(o => ({ value: o, label: o }));\n\n  return (\n    <div className=\"filters\">\n      <h3>Filter dimenstions values</h3>\n      <div>\n        <div>Datasource</div>\n        <div>\n          <Select\n            isMulti={true}\n            placeholder={\"All datasources\"}\n            value={datasource}\n            onChange={handleDataSourceChange}\n            options={datasourceOptions}\n          />\n        </div>\n      </div>\n      <div>\n        <div>Campain</div>\n        <div>\n          <Select\n            isMulti={true}\n            placeholder={\"All campains\"}\n            value={campain}\n            onChange={handleCampainChange}\n            options={campainOptions}\n          />\n        </div>\n      </div>\n      <div className=\"dashboard__apply\">\n        <button onClick={handleApply} disabled={!isDirty}>\n          Apply\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Filters;\n","export default {\n  sets: {\n    labels: [] as string[],\n    datasets: [\n      {\n        label: \"Clicks\",\n        yAxisID: \"clicks\",\n        fill: false,\n        lineTension: 0.1,\n        borderColor: \"#4285f4\",\n        pointRadius: 1,\n        data: [] as number[],\n      },\n      {\n        label: \"Impressions\",\n        yAxisID: \"impressions\",\n        fill: false,\n        lineTension: 0.1,\n        borderColor: \"#fbbc04\",\n        pointRadius: 1,\n        data: [] as number[],\n      }\n    ]\n  },\n  options: {\n    scales: {\n      yAxes: [\n        {\n          id: \"clicks\",\n          type: \"linear\",\n          position: \"left\"\n        },\n        {\n          id: \"impressions\",\n          type: \"linear\",\n          position: \"right\"\n        }\n      ],\n    }\n  }\n};\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport config from \"./config\";\n\nimport \"./Chart.scss\";\n\nexport interface Props {\n  clicks: number[];\n  impressions: number[];\n  labels: string[];\n}\n\nconst Chart: React.FC<Props> = ({ clicks, impressions, labels }) => {\n  const { sets, options } = config;\n  const [clicksSet, impressionsSet] = sets.datasets;\n\n  const data = {\n    ...sets,\n    labels,\n    datasets: [\n      { ...clicksSet, data: clicks },\n      { ...impressionsSet, data: impressions }\n    ]\n  };\n\n  return (\n    <div className=\"chart\">\n      <Line data={data} options={options} />\n    </div>\n  );\n};\n\nexport default Chart;\n","import Chart from './Chart';\n\nexport default Chart;","import Dashboard from './Dashboard';\n\nexport default Dashboard;","import React, { useState, useEffect } from \"react\";\nimport { getData, getLabels, Data } from \"../../services/dataService\";\nimport Filters from \"../Filters\";\nimport Chart from \"../Chart\";\n\nimport \"./Dashboard.scss\";\n\nconst Dashboard: React.FC = () => {\n  const [datasourceOptions, setDatasourceOptions] = useState<string[]>([]);\n  const [campainOptions, setCampainOptions] = useState<string[]>([]);\n\n  const [datasource, setDatasource] = useState<string[]>([]);\n  const [campain, setCampain] = useState<string[]>([]);\n\n  const [data, setData] = useState<Data[]>([]);\n\n  useEffect(() => {\n    const labels = getLabels();\n    setDatasourceOptions(labels.datasource);\n    setCampainOptions(labels.campain);\n  }, []);\n\n  useEffect(() => {\n    setData(getData(datasource, campain));\n  }, [datasource, campain]);\n\n  const handleApply = (datasource: string[], campain: string[]) => {\n    setDatasource(datasource);\n    setCampain(campain);\n  };\n\n  const clicks = data.map(o => o.clicks);\n  const impressions = data.map(o => o.impressions);\n  const labels = data.map(o => o.date);\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard__filters\">\n        <Filters\n          initDatasource={datasourceOptions}\n          initCampain={campainOptions}\n          onApply={handleApply}\n        />\n      </div>\n      <div className=\"dashboard__chart\">\n        <Chart clicks={clicks} impressions={impressions} labels={labels} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import App from './App'\n\nexport default App;","import React from \"react\";\nimport \"./App.scss\";\nimport Dashboard from \"../Dashboard\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <Dashboard />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}